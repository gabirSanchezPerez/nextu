"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uri_1 = require("../uri");
var NID$ = "(?:[0-9A-Za-z][0-9A-Za-z\\-]{1,31})";
var PCT_ENCODED$ = "(?:\\%[0-9A-Fa-f]{2})";
var TRANS$$ = "[0-9A-Za-z\\(\\)\\+\\,\\-\\.\\:\\=\\@\\;\\$\\_\\!\\*\\'\\/\\?\\#]";
var NSS$ = "(?:(?:" + PCT_ENCODED$ + "|" + TRANS$$ + ")+)";
var URN_SCHEME = new RegExp("^urn\\:(" + NID$ + ")$");
var URN_PATH = new RegExp("^(" + NID$ + ")\\:(" + NSS$ + ")$");
var URN_PARSE = /^([^\:]+)\:(.*)/;
var URN_EXCLUDED = /[\x00-\x20\\\"\&\<\>\[\]\^\`\{\|\}\~\x7F-\xFF]/g;
//RFC 2141
var handler = {
    scheme: "urn",
    parse: function (components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = uri_1.SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = undefined;
            if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options);
            }
        }
        else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
    },
    serialize: function (urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = uri_1.SCHEMES[urnScheme];
        if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
    },
};
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsOEJBQTZDO0FBVzdDLElBQU0sSUFBSSxHQUFHLHFDQUFxQyxDQUFDO0FBQ25ELElBQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFDO0FBQzdDLElBQU0sT0FBTyxHQUFHLG1FQUFtRSxDQUFDO0FBQ3BGLElBQU0sSUFBSSxHQUFHLFFBQVEsR0FBRyxZQUFZLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0QsSUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN4RCxJQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDakUsSUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUM7QUFDcEMsSUFBTSxZQUFZLEdBQUcsaURBQWlELENBQUM7QUFFdkUsVUFBVTtBQUNWLElBQU0sT0FBTyxHQUE4QztJQUMxRCxNQUFNLEVBQUcsS0FBSztJQUVkLEtBQUssRUFBRyxVQUFVLFVBQXdCLEVBQUUsT0FBa0I7UUFDN0QsSUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxJQUFJLGFBQWEsR0FBRyxVQUEyQixDQUFDO1FBRWhELElBQUksT0FBTyxFQUFFO1lBQ1osSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQztZQUMvRCxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQU0sU0FBUyxHQUFNLE1BQU0sVUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBRSxDQUFDO1lBQ3BELElBQU0sYUFBYSxHQUFHLGFBQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUV6QyxhQUFhLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUN4QixhQUFhLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUN4QixhQUFhLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUUvQixJQUFJLGFBQWEsRUFBRTtnQkFDbEIsYUFBYSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBa0IsQ0FBQzthQUM3RTtTQUNEO2FBQU07WUFDTixhQUFhLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLElBQUksd0JBQXdCLENBQUM7U0FDdEU7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxFQUFHLFVBQVUsYUFBMkIsRUFBRSxPQUFrQjtRQUNwRSxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLGFBQWEsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDO1FBQy9ELElBQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7UUFDOUIsSUFBTSxTQUFTLEdBQU0sTUFBTSxVQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFFLENBQUM7UUFDcEQsSUFBTSxhQUFhLEdBQUcsYUFBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXpDLElBQUksYUFBYSxFQUFFO1lBQ2xCLGFBQWEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQWtCLENBQUM7U0FDakY7UUFFRCxJQUFNLGFBQWEsR0FBRyxhQUE4QixDQUFDO1FBQ3JELElBQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7UUFDOUIsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxVQUFJLEdBQUssQ0FBQztRQUVwRCxPQUFPLGFBQWEsQ0FBQztJQUN0QixDQUFDO0NBQ0QsQ0FBQztBQUVGLGtCQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVSSVNjaGVtZUhhbmRsZXIsIFVSSUNvbXBvbmVudHMsIFVSSU9wdGlvbnMgfSBmcm9tIFwiLi4vdXJpXCI7XG5pbXBvcnQgeyBwY3RFbmNDaGFyLCBTQ0hFTUVTIH0gZnJvbSBcIi4uL3VyaVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVSTkNvbXBvbmVudHMgZXh0ZW5kcyBVUklDb21wb25lbnRzIHtcblx0bmlkPzpzdHJpbmc7XG5cdG5zcz86c3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVSTk9wdGlvbnMgZXh0ZW5kcyBVUklPcHRpb25zIHtcblx0bmlkPzpzdHJpbmc7XG59XG5cbmNvbnN0IE5JRCQgPSBcIig/OlswLTlBLVphLXpdWzAtOUEtWmEtelxcXFwtXXsxLDMxfSlcIjtcbmNvbnN0IFBDVF9FTkNPREVEJCA9IFwiKD86XFxcXCVbMC05QS1GYS1mXXsyfSlcIjtcbmNvbnN0IFRSQU5TJCQgPSBcIlswLTlBLVphLXpcXFxcKFxcXFwpXFxcXCtcXFxcLFxcXFwtXFxcXC5cXFxcOlxcXFw9XFxcXEBcXFxcO1xcXFwkXFxcXF9cXFxcIVxcXFwqXFxcXCdcXFxcL1xcXFw/XFxcXCNdXCI7XG5jb25zdCBOU1MkID0gXCIoPzooPzpcIiArIFBDVF9FTkNPREVEJCArIFwifFwiICsgVFJBTlMkJCArIFwiKSspXCI7XG5jb25zdCBVUk5fU0NIRU1FID0gbmV3IFJlZ0V4cChcIl51cm5cXFxcOihcIiArIE5JRCQgKyBcIikkXCIpO1xuY29uc3QgVVJOX1BBVEggPSBuZXcgUmVnRXhwKFwiXihcIiArIE5JRCQgKyBcIilcXFxcOihcIiArIE5TUyQgKyBcIikkXCIpO1xuY29uc3QgVVJOX1BBUlNFID0gL14oW15cXDpdKylcXDooLiopLztcbmNvbnN0IFVSTl9FWENMVURFRCA9IC9bXFx4MDAtXFx4MjBcXFxcXFxcIlxcJlxcPFxcPlxcW1xcXVxcXlxcYFxce1xcfFxcfVxcflxceDdGLVxceEZGXS9nO1xuXG4vL1JGQyAyMTQxXG5jb25zdCBoYW5kbGVyOlVSSVNjaGVtZUhhbmRsZXI8VVJOQ29tcG9uZW50cyxVUk5PcHRpb25zPiA9IHtcblx0c2NoZW1lIDogXCJ1cm5cIixcblxuXHRwYXJzZSA6IGZ1bmN0aW9uIChjb21wb25lbnRzOlVSSUNvbXBvbmVudHMsIG9wdGlvbnM6VVJOT3B0aW9ucyk6VVJOQ29tcG9uZW50cyB7XG5cdFx0Y29uc3QgbWF0Y2hlcyA9IGNvbXBvbmVudHMucGF0aCAmJiBjb21wb25lbnRzLnBhdGgubWF0Y2goVVJOX1BBUlNFKTtcblx0XHRsZXQgdXJuQ29tcG9uZW50cyA9IGNvbXBvbmVudHMgYXMgVVJOQ29tcG9uZW50cztcblxuXHRcdGlmIChtYXRjaGVzKSB7XG5cdFx0XHRjb25zdCBzY2hlbWUgPSBvcHRpb25zLnNjaGVtZSB8fCB1cm5Db21wb25lbnRzLnNjaGVtZSB8fCBcInVyblwiO1xuXHRcdFx0Y29uc3QgbmlkID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0Y29uc3QgbnNzID0gbWF0Y2hlc1syXTtcblx0XHRcdGNvbnN0IHVyblNjaGVtZSA9IGAke3NjaGVtZX06JHtvcHRpb25zLm5pZCB8fCBuaWR9YDtcblx0XHRcdGNvbnN0IHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTW3VyblNjaGVtZV07XG5cblx0XHRcdHVybkNvbXBvbmVudHMubmlkID0gbmlkO1xuXHRcdFx0dXJuQ29tcG9uZW50cy5uc3MgPSBuc3M7XG5cdFx0XHR1cm5Db21wb25lbnRzLnBhdGggPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmIChzY2hlbWVIYW5kbGVyKSB7XG5cdFx0XHRcdHVybkNvbXBvbmVudHMgPSBzY2hlbWVIYW5kbGVyLnBhcnNlKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpIGFzIFVSTkNvbXBvbmVudHM7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVybkNvbXBvbmVudHMuZXJyb3IgPSB1cm5Db21wb25lbnRzLmVycm9yIHx8IFwiVVJOIGNhbiBub3QgYmUgcGFyc2VkLlwiO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cm5Db21wb25lbnRzO1xuXHR9LFxuXG5cdHNlcmlhbGl6ZSA6IGZ1bmN0aW9uICh1cm5Db21wb25lbnRzOlVSTkNvbXBvbmVudHMsIG9wdGlvbnM6VVJOT3B0aW9ucyk6VVJJQ29tcG9uZW50cyB7XG5cdFx0Y29uc3Qgc2NoZW1lID0gb3B0aW9ucy5zY2hlbWUgfHwgdXJuQ29tcG9uZW50cy5zY2hlbWUgfHwgXCJ1cm5cIjtcblx0XHRjb25zdCBuaWQgPSB1cm5Db21wb25lbnRzLm5pZDtcblx0XHRjb25zdCB1cm5TY2hlbWUgPSBgJHtzY2hlbWV9OiR7b3B0aW9ucy5uaWQgfHwgbmlkfWA7XG5cdFx0Y29uc3Qgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbdXJuU2NoZW1lXTtcblxuXHRcdGlmIChzY2hlbWVIYW5kbGVyKSB7XG5cdFx0XHR1cm5Db21wb25lbnRzID0gc2NoZW1lSGFuZGxlci5zZXJpYWxpemUodXJuQ29tcG9uZW50cywgb3B0aW9ucykgYXMgVVJOQ29tcG9uZW50cztcblx0XHR9XG5cblx0XHRjb25zdCB1cmlDb21wb25lbnRzID0gdXJuQ29tcG9uZW50cyBhcyBVUklDb21wb25lbnRzO1xuXHRcdGNvbnN0IG5zcyA9IHVybkNvbXBvbmVudHMubnNzO1xuXHRcdHVyaUNvbXBvbmVudHMucGF0aCA9IGAke25pZCB8fCBvcHRpb25zLm5pZH06JHtuc3N9YDtcblxuXHRcdHJldHVybiB1cmlDb21wb25lbnRzO1xuXHR9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlcjsiXX0=