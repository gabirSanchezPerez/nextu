"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("../common/events");
Zone.__load_patch('EventEmitter', function (global) {
    // For EventEmitter
    var EE_ADD_LISTENER = 'addListener';
    var EE_PREPEND_LISTENER = 'prependListener';
    var EE_REMOVE_LISTENER = 'removeListener';
    var EE_REMOVE_ALL_LISTENER = 'removeAllListeners';
    var EE_LISTENERS = 'listeners';
    var EE_ON = 'on';
    var compareTaskCallbackVsDelegate = function (task, delegate) {
        // same callback, same capture, same event name, just return
        return task.callback === delegate || task.callback.listener === delegate;
    };
    var eventNameToString = function (eventName) {
        if (typeof eventName === 'string') {
            return eventName;
        }
        if (!eventName) {
            return '';
        }
        return eventName.toString().replace('(', '_').replace(')', '_');
    };
    function patchEventEmitterMethods(obj) {
        var result = events_1.patchEventTarget(global, [obj], {
            useG: false,
            add: EE_ADD_LISTENER,
            rm: EE_REMOVE_LISTENER,
            prepend: EE_PREPEND_LISTENER,
            rmAll: EE_REMOVE_ALL_LISTENER,
            listeners: EE_LISTENERS,
            chkDup: false,
            rt: true,
            diff: compareTaskCallbackVsDelegate,
            eventNameToString: eventNameToString
        });
        if (result && result[0]) {
            obj[EE_ON] = obj[EE_ADD_LISTENER];
        }
    }
    // EventEmitter
    var events;
    try {
        events = require('events');
    }
    catch (err) {
    }
    if (events && events.EventEmitter) {
        patchEventEmitterMethods(events.EventEmitter.prototype);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBRUgsMkNBQWtEO0FBRWxELElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFVBQUMsTUFBVztJQUM1QyxtQkFBbUI7SUFDbkIsSUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDO0lBQ3RDLElBQU0sbUJBQW1CLEdBQUcsaUJBQWlCLENBQUM7SUFDOUMsSUFBTSxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUM1QyxJQUFNLHNCQUFzQixHQUFHLG9CQUFvQixDQUFDO0lBQ3BELElBQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQztJQUNqQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7SUFFbkIsSUFBTSw2QkFBNkIsR0FBRyxVQUFTLElBQVMsRUFBRSxRQUFhO1FBQ3JFLDREQUE0RDtRQUM1RCxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUMzRSxDQUFDLENBQUM7SUFFRixJQUFNLGlCQUFpQixHQUFHLFVBQVMsU0FBd0I7UUFDekQsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsT0FBTyxTQUFtQixDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0lBRUYsU0FBUyx3QkFBd0IsQ0FBQyxHQUFRO1FBQ3hDLElBQU0sTUFBTSxHQUFHLHlCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdDLElBQUksRUFBRSxLQUFLO1lBQ1gsR0FBRyxFQUFFLGVBQWU7WUFDcEIsRUFBRSxFQUFFLGtCQUFrQjtZQUN0QixPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLEtBQUssRUFBRSxzQkFBc0I7WUFDN0IsU0FBUyxFQUFFLFlBQVk7WUFDdkIsTUFBTSxFQUFFLEtBQUs7WUFDYixFQUFFLEVBQUUsSUFBSTtZQUNSLElBQUksRUFBRSw2QkFBNkI7WUFDbkMsaUJBQWlCLEVBQUUsaUJBQWlCO1NBQ3JDLENBQUMsQ0FBQztRQUNILElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELGVBQWU7SUFDZixJQUFJLE1BQU0sQ0FBQztJQUNYLElBQUk7UUFDRixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzVCO0lBQUMsT0FBTyxHQUFHLEVBQUU7S0FDYjtJQUVELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUU7UUFDakMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN6RDtBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge3BhdGNoRXZlbnRUYXJnZXR9IGZyb20gJy4uL2NvbW1vbi9ldmVudHMnO1xuXG5ab25lLl9fbG9hZF9wYXRjaCgnRXZlbnRFbWl0dGVyJywgKGdsb2JhbDogYW55KSA9PiB7XG4gIC8vIEZvciBFdmVudEVtaXR0ZXJcbiAgY29uc3QgRUVfQUREX0xJU1RFTkVSID0gJ2FkZExpc3RlbmVyJztcbiAgY29uc3QgRUVfUFJFUEVORF9MSVNURU5FUiA9ICdwcmVwZW5kTGlzdGVuZXInO1xuICBjb25zdCBFRV9SRU1PVkVfTElTVEVORVIgPSAncmVtb3ZlTGlzdGVuZXInO1xuICBjb25zdCBFRV9SRU1PVkVfQUxMX0xJU1RFTkVSID0gJ3JlbW92ZUFsbExpc3RlbmVycyc7XG4gIGNvbnN0IEVFX0xJU1RFTkVSUyA9ICdsaXN0ZW5lcnMnO1xuICBjb25zdCBFRV9PTiA9ICdvbic7XG5cbiAgY29uc3QgY29tcGFyZVRhc2tDYWxsYmFja1ZzRGVsZWdhdGUgPSBmdW5jdGlvbih0YXNrOiBhbnksIGRlbGVnYXRlOiBhbnkpIHtcbiAgICAvLyBzYW1lIGNhbGxiYWNrLCBzYW1lIGNhcHR1cmUsIHNhbWUgZXZlbnQgbmFtZSwganVzdCByZXR1cm5cbiAgICByZXR1cm4gdGFzay5jYWxsYmFjayA9PT0gZGVsZWdhdGUgfHwgdGFzay5jYWxsYmFjay5saXN0ZW5lciA9PT0gZGVsZWdhdGU7XG4gIH07XG5cbiAgY29uc3QgZXZlbnROYW1lVG9TdHJpbmcgPSBmdW5jdGlvbihldmVudE5hbWU6IHN0cmluZ3xTeW1ib2wpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBldmVudE5hbWUgYXMgc3RyaW5nO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50TmFtZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnROYW1lLnRvU3RyaW5nKCkucmVwbGFjZSgnKCcsICdfJykucmVwbGFjZSgnKScsICdfJyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGF0Y2hFdmVudEVtaXR0ZXJNZXRob2RzKG9iajogYW55KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gcGF0Y2hFdmVudFRhcmdldChnbG9iYWwsIFtvYmpdLCB7XG4gICAgICB1c2VHOiBmYWxzZSxcbiAgICAgIGFkZDogRUVfQUREX0xJU1RFTkVSLFxuICAgICAgcm06IEVFX1JFTU9WRV9MSVNURU5FUixcbiAgICAgIHByZXBlbmQ6IEVFX1BSRVBFTkRfTElTVEVORVIsXG4gICAgICBybUFsbDogRUVfUkVNT1ZFX0FMTF9MSVNURU5FUixcbiAgICAgIGxpc3RlbmVyczogRUVfTElTVEVORVJTLFxuICAgICAgY2hrRHVwOiBmYWxzZSxcbiAgICAgIHJ0OiB0cnVlLFxuICAgICAgZGlmZjogY29tcGFyZVRhc2tDYWxsYmFja1ZzRGVsZWdhdGUsXG4gICAgICBldmVudE5hbWVUb1N0cmluZzogZXZlbnROYW1lVG9TdHJpbmdcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdFswXSkge1xuICAgICAgb2JqW0VFX09OXSA9IG9ialtFRV9BRERfTElTVEVORVJdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV2ZW50RW1pdHRlclxuICBsZXQgZXZlbnRzO1xuICB0cnkge1xuICAgIGV2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgfVxuXG4gIGlmIChldmVudHMgJiYgZXZlbnRzLkV2ZW50RW1pdHRlcikge1xuICAgIHBhdGNoRXZlbnRFbWl0dGVyTWV0aG9kcyhldmVudHMuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG4gIH1cbn0pO1xuIl19